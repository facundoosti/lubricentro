services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: lubricentro_postgres
    environment:
      POSTGRES_DB: lubricentro_development
      POSTGRES_USER: lubricentro
      POSTGRES_PASSWORD: lubricentro123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
    networks:
      - lubricentro_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lubricentro -d lubricentro_development"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Rails API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: lubricentro_backend
    environment:
      RAILS_ENV: ${RAILS_ENV}
      DATABASE_URL: ${DATABASE_URL}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - backend_bundle:/usr/local/bundle
      - backend_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lubricentro_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z postgres 5432; do sleep 1; done &&
        echo 'Database is ready!' &&
        bundle install &&
        rails db:create db:migrate &&
        rails server -b 0.0.0.0 -p 3000
      "

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: lubricentro_frontend
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      VITE_APP_NAME: ${VITE_APP_NAME}
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - lubricentro_network
    command: npm run dev -- --host 0.0.0.0

  # Nginx reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: lubricentro_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - lubricentro_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  backend_bundle:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  lubricentro_network:
    driver: bridge 